import { inject as N, shallowRef as Q, ref as y, watch as j, onMounted as x, unref as B, onUnmounted as D } from "vue";
import { PROVIDE_KEY as S, unrefElement as H, HOST_COOKIE as q, HOST_NO_COOKIE as G, PlayerState as U } from "@vue-youtube/shared";
export * from "@vue-youtube/shared";
const $ = (n) => ({
  playerVars: n.playerVars ?? {},
  cookie: n.cookie ?? !0,
  height: n.height ?? 720,
  width: n.width ?? 1280
}), z = () => {
  const n = N(S);
  if (!n)
    throw new Error("You may forget to apply app.use(manager). See https://vue-youtube.github.io/docs/usage/manager.html for more information");
  return n;
}, W = (n) => {
  const h = {
    install(l) {
      var s;
      l.provide(S, h), (s = this._state.options.deferLoading) != null && s.enabled || this._insert();
    },
    register(l, s) {
      var c;
      const r = l.id || `vue-youtube-${this._state.counter++}`, i = this._state.players.get(r);
      if (i !== void 0) {
        i({
          factory: this._state.factory,
          id: r
        });
        return;
      }
      this._state.factory === void 0 ? (this._state.backlog.set(r, s), (c = this._state.options.deferLoading) != null && c.enabled && this._state.options.deferLoading.autoLoad && this._insert()) : s({
        factory: this._state.factory,
        id: r
      });
    },
    load() {
      this._state.factory === void 0 && this._insert();
    },
    _insert() {
      var r;
      const l = document.createElement("script");
      l.src = "https://www.youtube.com/player_api";
      const s = document.querySelectorAll("script")[0];
      (r = s.parentNode) == null || r.insertBefore(l, s), window.onYouTubeIframeAPIReady = () => {
        this._state.factory = window.YT;
        for (const [i, c] of this._state.backlog.entries())
          this._state.backlog.delete(i), this._state.players.set(i, c), c({
            factory: this._state.factory,
            id: i
          });
      };
    },
    _state: {
      backlog: /* @__PURE__ */ new Map(),
      players: /* @__PURE__ */ new Map(),
      options: n || {
        deferLoading: {
          enabled: !1,
          autoLoad: !1
        }
      },
      factory: void 0,
      counter: 1
    }
  };
  return h;
}, X = (n, p, v = {}) => {
  const {
    playerVars: h,
    cookie: l,
    height: s,
    width: r
  } = $(v), i = l ? q : G, c = z(), b = new Array(), _ = new Array(), m = new Array(), w = new Array(), C = new Array(), k = new Array(), a = Q(), P = y(n), g = y(!1), d = y(!1), f = (e, t) => {
    for (const u of t)
      u(e);
  }, A = (...e) => {
    b.push(...e);
  }, I = (...e) => {
    _.push(...e);
  }, L = (...e) => {
    m.push(...e);
  }, O = (...e) => {
    w.push(...e);
  }, E = (...e) => {
    C.push(...e);
  }, M = (...e) => {
    k.push(...e);
  }, R = () => {
    var t, u, o;
    const e = (t = a.value) == null ? void 0 : t.getPlayerState();
    if (e && e === U.PLAYING) {
      (u = a.value) == null || u.pauseVideo();
      return;
    }
    (o = a.value) == null || o.playVideo();
  }, V = () => {
    var e, t;
    if ((e = a.value) != null && e.isMuted()) {
      a.value.unMute();
      return;
    }
    (t = a.value) == null || t.mute();
  }, T = () => {
    var e, t;
    if (g.value) {
      (e = a.value) == null || e.setShuffle(!1), g.value = !1;
      return;
    }
    (t = a.value) == null || t.setShuffle(!0), g.value = !0;
  }, Y = () => {
    var e, t;
    if (d.value) {
      (e = a.value) == null || e.setLoop(!1), d.value = !1;
      return;
    }
    (t = a.value) == null || t.setLoop(!0), d.value = !0;
  }, K = j(P, (e) => {
    var t;
    (t = a.value) == null || t.loadVideoById(e);
  });
  return x(() => {
    const e = H(p);
    e && c.register(e, ({ factory: t, id: u }) => {
      e.id = u, a.value = new t.Player(u, {
        videoId: B(P),
        playerVars: h,
        height: s,
        width: r,
        host: i,
        events: {
          onPlaybackQualityChange: (o) => {
            f(o, b);
          },
          onPlaybackRateChange: (o) => {
            f(o, _);
          },
          onStateChange: (o) => {
            f(o, m);
          },
          onApiChange: (o) => {
            f(o, w);
          },
          onError: (o) => {
            f(o, C);
          },
          onReady: (o) => {
            f(o, k);
          }
        }
      });
    });
  }), D(() => {
    var e;
    (e = a.value) == null || e.destroy(), K();
  }), {
    instance: a,
    togglePlay: R,
    toggleMute: V,
    toggleLoop: Y,
    toggleShuffle: T,
    onPlaybackQualityChange: A,
    onPlaybackRateChange: I,
    onStateChange: L,
    onApiChange: O,
    onError: E,
    onReady: M
  };
};
export {
  W as createManager,
  z as injectManager,
  X as usePlayer,
  $ as withConfigDefaults
};
